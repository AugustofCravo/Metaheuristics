{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/thaysrodrigues/Desktop/projetoFinal9/imports/ui/RadialProgressBar.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions",["flow",{}],"nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}]],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"sourceFileName":"/Users/thaysrodrigues/Desktop/projetoFinal9/imports/ui/RadialProgressBar.vue","filename":"/Users/thaysrodrigues/Desktop/projetoFinal9/imports/ui/RadialProgressBar.vue","passPerPreset":false,"envName":"development","cwd":"/Users/thaysrodrigues/Desktop/projetoFinal9","root":"/Users/thaysrodrigues/Desktop/projetoFinal9","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.7.6","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/thaysrodrigues/Desktop/projetoFinal9/imports/ui/RadialProgressBar.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/Users/thaysrodrigues/Desktop/projetoFinal9/imports/ui/RadialProgressBar.vue"}},"code":"module.exportDefault({\n  props: {\n    diameter: {\n      type: Number,\n      required: false,\n      \"default\": 200\n    },\n    totalSteps: {\n      type: Number,\n      required: true,\n      \"default\": 10\n    },\n    completedSteps: {\n      type: Number,\n      required: true,\n      \"default\": 0\n    },\n    startColor: {\n      type: String,\n      required: false,\n      \"default\": '#bbff42'\n    },\n    stopColor: {\n      type: String,\n      required: false,\n      \"default\": '#429321'\n    },\n    strokeWidth: {\n      type: Number,\n      required: false,\n      \"default\": 10\n    },\n    innerStrokeWidth: {\n      type: Number,\n      required: false,\n      \"default\": 10\n    },\n    strokeLinecap: {\n      type: String,\n      required: false,\n      \"default\": 'round'\n    },\n    animateSpeed: {\n      type: Number,\n      required: false,\n      \"default\": 1000\n    },\n    innerStrokeColor: {\n      type: String,\n      required: false,\n      \"default\": '#323232'\n    },\n    fps: {\n      type: Number,\n      required: false,\n      \"default\": 60\n    },\n    timingFunc: {\n      type: String,\n      required: false,\n      \"default\": 'linear'\n    },\n    isClockwise: {\n      type: Boolean,\n      required: false,\n      \"default\": true\n    }\n  },\n  data: function () {\n    return {\n      gradient: {\n        fx: 0.99,\n        fy: 0.5,\n        cx: 0.5,\n        cy: 0.5,\n        r: 0.65\n      },\n      gradientAnimation: null,\n      currentAngle: 0,\n      strokeDashoffset: 0\n    };\n  },\n  computed: {\n    radius: function () {\n      return this.diameter / 2;\n    },\n    circumference: function () {\n      return Math.PI * this.innerCircleDiameter;\n    },\n    stepSize: function () {\n      if (this.totalSteps === 0) {\n        return 0;\n      }\n\n      return 100 / this.totalSteps;\n    },\n    finishedPercentage: function () {\n      return this.stepSize * this.completedSteps;\n    },\n    circleSlice: function () {\n      return 2 * Math.PI / this.totalSteps;\n    },\n    animateSlice: function () {\n      return this.circleSlice / this.totalPoints;\n    },\n    innerCircleDiameter: function () {\n      return this.diameter - this.innerStrokeWidth * 2;\n    },\n    innerCircleRadius: function () {\n      return this.innerCircleDiameter / 2;\n    },\n    totalPoints: function () {\n      return this.animateSpeed / this.animationIncrements;\n    },\n    animationIncrements: function () {\n      return 1000 / this.fps;\n    },\n    hasGradient: function () {\n      return this.startColor !== this.stopColor;\n    },\n    containerStyle: function () {\n      return {\n        height: this.diameter + \"px\",\n        width: this.diameter + \"px\"\n      };\n    },\n    progressStyle: function () {\n      return {\n        height: this.diameter + \"px\",\n        width: this.diameter + \"px\",\n        strokeWidth: this.strokeWidth + \"px\",\n        strokeDashoffset: this.strokeDashoffset,\n        transition: \"stroke-dashoffset \" + this.animateSpeed + \"ms \" + this.timingFunc\n      };\n    },\n    strokeStyle: function () {\n      return {\n        height: this.diameter + \"px\",\n        width: this.diameter + \"px\",\n        strokeWidth: this.innerStrokeWidth + \"px\"\n      };\n    },\n    innerCircleStyle: function () {\n      return {\n        width: this.innerCircleDiameter + \"px\"\n      };\n    }\n  },\n  methods: {\n    getStopPointsOfCircle: function (steps) {\n      var points = [];\n\n      for (var i = 0; i < steps; i++) {\n        var angle = this.circleSlice * i;\n        points.push(this.getPointOfCircle(angle));\n      }\n\n      return points;\n    },\n    getPointOfCircle: function (angle) {\n      var radius = 0.5;\n      var x = radius + radius * Math.cos(angle);\n      var y = radius + radius * Math.sin(angle);\n      return {\n        x: x,\n        y: y\n      };\n    },\n    gotoPoint: function () {\n      var point = this.getPointOfCircle(this.currentAngle);\n\n      if (point.x && point.y) {\n        this.gradient.fx = point.x;\n        this.gradient.fy = point.y;\n      }\n    },\n    direction: function () {\n      if (this.isClockwise) {\n        return 1;\n      }\n\n      return -1;\n    },\n    changeProgress: function (_ref) {\n      var _this = this;\n\n      var _ref$isAnimate = _ref.isAnimate,\n          isAnimate = _ref$isAnimate === void 0 ? true : _ref$isAnimate;\n      this.strokeDashoffset = (100 - this.finishedPercentage) / 100 * this.circumference * this.direction();\n\n      if (this.gradientAnimation) {\n        clearInterval(this.gradientAnimation);\n      }\n\n      if (!isAnimate) {\n        this.gotoNextStep();\n        return;\n      }\n\n      var angleOffset = (this.completedSteps - 1) * this.circleSlice;\n      var i = (this.currentAngle - angleOffset) / this.animateSlice;\n      var incrementer = Math.abs(i - this.totalPoints) / this.totalPoints;\n      var isMoveForward = i < this.totalPoints;\n      this.gradientAnimation = setInterval(function () {\n        if (isMoveForward && i >= _this.totalPoints || !isMoveForward && i < _this.totalPoints) {\n          clearInterval(_this.gradientAnimation);\n          return;\n        }\n\n        _this.currentAngle = angleOffset + _this.animateSlice * i;\n\n        _this.gotoPoint();\n\n        i += isMoveForward ? incrementer : -incrementer;\n      }, this.animationIncrements);\n    },\n    gotoNextStep: function () {\n      this.currentAngle = this.completedSteps * this.circleSlice;\n      this.gotoPoint();\n    }\n  },\n  watch: {\n    totalSteps: function () {\n      this.changeProgress({\n        isAnimate: true\n      });\n    },\n    completedSteps: function () {\n      this.changeProgress({\n        isAnimate: true\n      });\n    },\n    diameter: function () {\n      this.changeProgress({\n        isAnimate: true\n      });\n    },\n    strokeWidth: function () {\n      this.changeProgress({\n        isAnimate: true\n      });\n    }\n  },\n  created: function () {\n    this.changeProgress({\n      isAnimate: false\n    });\n  }\n});","map":{"version":3,"sources":["/Users/thaysrodrigues/Desktop/projetoFinal9/imports/ui/RadialProgressBar.vue"],"names":["module","exportDefault","props","diameter","type","Number","required","totalSteps","completedSteps","startColor","String","stopColor","strokeWidth","innerStrokeWidth","strokeLinecap","animateSpeed","innerStrokeColor","fps","timingFunc","isClockwise","Boolean","data","gradient","fx","fy","cx","cy","r","gradientAnimation","currentAngle","strokeDashoffset","computed","radius","circumference","Math","PI","innerCircleDiameter","stepSize","finishedPercentage","circleSlice","animateSlice","totalPoints","innerCircleRadius","animationIncrements","hasGradient","containerStyle","height","width","progressStyle","transition","strokeStyle","innerCircleStyle","methods","getStopPointsOfCircle","steps","points","i","angle","push","getPointOfCircle","x","cos","y","sin","gotoPoint","point","direction","changeProgress","isAnimate","clearInterval","gotoNextStep","angleOffset","incrementer","abs","isMoveForward","setInterval","watch","created"],"mappings":"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","sourcesContent":["\nexport default {\n  props: {\n    diameter: {\n      type: Number,\n      required: false,\n      default: 200\n    },\n    totalSteps: {\n      type: Number,\n      required: true,\n      default: 10\n    },\n    completedSteps: {\n      type: Number,\n      required: true,\n      default: 0\n    },\n    startColor: {\n      type: String,\n      required: false,\n      default: '#bbff42'\n    },\n    stopColor: {\n      type: String,\n      required: false,\n      default: '#429321'\n    },\n    strokeWidth: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    innerStrokeWidth: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    strokeLinecap: {\n      type: String,\n      required: false,\n      default: 'round'\n    },\n    animateSpeed: {\n      type: Number,\n      required: false,\n      default: 1000\n    },\n    innerStrokeColor: {\n      type: String,\n      required: false,\n      default: '#323232'\n    },\n    fps: {\n      type: Number,\n      required: false,\n      default: 60\n    },\n    timingFunc: {\n      type: String,\n      required: false,\n      default: 'linear'\n    },\n    isClockwise: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  data () {\n    return {\n      gradient: {\n        fx: 0.99,\n        fy: 0.5,\n        cx: 0.5,\n        cy: 0.5,\n        r: 0.65\n      },\n      gradientAnimation: null,\n      currentAngle: 0,\n      strokeDashoffset: 0\n    }\n  },\n  computed: {\n    radius () {\n      return this.diameter / 2\n    },\n    circumference () {\n      return Math.PI * this.innerCircleDiameter\n    },\n    stepSize () {\n      if (this.totalSteps === 0) {\n        return 0\n      }\n      return 100 / this.totalSteps\n    },\n    finishedPercentage () {\n      return this.stepSize * this.completedSteps\n    },\n    circleSlice () {\n      return 2 * Math.PI / this.totalSteps\n    },\n    animateSlice () {\n      return this.circleSlice / this.totalPoints\n    },\n    innerCircleDiameter () {\n      return this.diameter - (this.innerStrokeWidth * 2)\n    },\n    innerCircleRadius () {\n      return this.innerCircleDiameter / 2\n    },\n    totalPoints () {\n      return this.animateSpeed / this.animationIncrements\n    },\n    animationIncrements () {\n      return 1000 / this.fps\n    },\n    hasGradient () {\n      return this.startColor !== this.stopColor\n    },\n    containerStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`\n      }\n    },\n    progressStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.strokeWidth}px`,\n        strokeDashoffset: this.strokeDashoffset,\n        transition: `stroke-dashoffset ${this.animateSpeed}ms ${this.timingFunc}`\n      }\n    },\n    strokeStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.innerStrokeWidth}px`\n      }\n    },\n    innerCircleStyle () {\n      return {\n        width: `${this.innerCircleDiameter}px`\n      }\n    },\n  },\n  methods: {\n    getStopPointsOfCircle (steps) {\n      const points = []\n      for (let i = 0; i < steps; i++) {\n        const angle = this.circleSlice * i\n        points.push(this.getPointOfCircle(angle))\n      }\n      return points\n    },\n    getPointOfCircle (angle) {\n      const radius = 0.5\n      const x = radius + (radius * Math.cos(angle))\n      const y = radius + (radius * Math.sin(angle))\n      return { x, y }\n    },\n    gotoPoint () {\n      const point = this.getPointOfCircle(this.currentAngle)\n      if (point.x && point.y) {\n        this.gradient.fx = point.x\n        this.gradient.fy = point.y\n      }\n    },\n    direction () {\n      if (this.isClockwise) {\n        return 1\n      }\n      return -1\n    },\n    changeProgress ({ isAnimate = true }) {\n      this.strokeDashoffset = ((100 - this.finishedPercentage) / 100) * this.circumference * this.direction()\n      if (this.gradientAnimation) {\n        clearInterval(this.gradientAnimation)\n      }\n      if (!isAnimate) {\n        this.gotoNextStep()\n        return\n      }\n      const angleOffset = (this.completedSteps - 1) * this.circleSlice\n      let i = (this.currentAngle - angleOffset) / this.animateSlice\n      const incrementer = Math.abs(i - this.totalPoints) / this.totalPoints\n      const isMoveForward = i < this.totalPoints\n      this.gradientAnimation = setInterval(() => {\n        if (isMoveForward && i >= this.totalPoints ||\n            !isMoveForward && i < this.totalPoints) {\n          clearInterval(this.gradientAnimation)\n          return\n        }\n        this.currentAngle = angleOffset + (this.animateSlice * i)\n        this.gotoPoint()\n        i += isMoveForward ? incrementer : -incrementer\n      }, this.animationIncrements)\n    },\n    gotoNextStep () {\n      this.currentAngle = this.completedSteps * this.circleSlice\n      this.gotoPoint()\n    }\n  },\n  watch: {\n    totalSteps () {\n      this.changeProgress({ isAnimate: true })\n    },\n    completedSteps () {\n      this.changeProgress({ isAnimate: true })\n    },\n    diameter () {\n      this.changeProgress({ isAnimate: true })\n    },\n    strokeWidth () {\n      this.changeProgress({ isAnimate: true })\n    }\n  },\n  created () {\n    this.changeProgress({ isAnimate: false })\n  }\n}\n"]},"sourceType":"module","hash":"7dbef9321c1ce1657ef0d0525381d75f24596f0d"}
